package com.gopal.twit.commands;

import com.gopal.twit.core.GitRepository;
import com.gopal.twit.core.objects.GitTag;
import com.gopal.twit.core.ref.RefResolver;
import com.gopal.twit.util.ObjectIO;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;

/**
 * This command is used to do 2 things:
 * 1) create a tag for an object
 * 2) list explicit tags (by default)
 */
public class TagCommand implements Command{
    @Override
    public void execute(String[] args) throws Exception {
        GitRepository repo = GitRepository.find();

        boolean createTagObject = false;
        String name = null;
        String object = "HEAD";

        for(int i=0;i<args.length;i++){
            if(args[i].equals("-a")){
                createTagObject = true;
            }
            else if(name == null){
                name = args[i];
            }
            else{
                object = args[i];
            }
        }

        if(name == null){
            //List tags
            Map<String, Object> refs = RefResolver.refList(repo, null);
            if(refs.containsKey("tags")){
                showTags((Map<String, Object>) refs.get("tags"), "");
            }
        }
        else{
            //create tag
            tagCreate(repo, name, object, createTagObject);
        }
    }

    private void showTags(Map<String, Object> tags, String prefix){
        for (Map.Entry<String, Object> entry : tags.entrySet()){
            String k = entry.getKey();
            Object v = entry.getValue();

            if(v instanceof String){
                System.out.println(prefix + k);
            }
            else{
                showTags((Map<String, Object>) v, prefix + k + "/");
            }
        }
    }

    private void tagCreate(GitRepository repo, String name, String ref, boolean createTagObject) throws Exception{
        String sha = RefResolver.objectFind(repo, ref);

        if(createTagObject){
            GitTag tag = new GitTag();
            tag.init();
            Map<String, Object> kvlm = tag.getKvlm();

            kvlm.put("object", sha.getBytes(StandardCharsets.UTF_8));
            kvlm.put("type", "commit".getBytes(StandardCharsets.UTF_8));
            kvlm.put("tag", name.getBytes(StandardCharsets.UTF_8));
            kvlm.put("tagger", "Twit <twit@example.com>".getBytes(StandardCharsets.UTF_8));
            kvlm.put(null, "A tag generated by twit\n".getBytes(StandardCharsets.UTF_8));

            String tagSha = ObjectIO.objectWrite(tag, repo);
            refCreate(repo, "tags/" + name, tagSha);
        }else{
            // Lightweight tag
            refCreate(repo, "tags/" + name, sha);
        }
    }

    private void refCreate(GitRepository repo, String refName, String sha) throws Exception{
        Path refPath = repo.repoFile(true, "refs", refName);
        Files.writeString(refPath, sha + "\n");
    }
}
